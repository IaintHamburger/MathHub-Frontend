"use client"

import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  AlertTriangle,
  Bell,
  Calendar,
  Info,
  Megaphone,
  Pin,
  Search,
  Star,
} from "lucide-react"
import { useState } from "react"

export default function AnnouncementsPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")

  const announcements = [
    {
      id: 1,
      title: "üéâ MathHub 2.0 ÈáçÂ§ßÊõ¥Êñ∞‰∏äÁ∑öÔºÅ",
      content:
        "ÊàëÂÄëÂæàËààÂ•ÆÂú∞ÂÆ£Â∏É MathHub 2.0 Ê≠£Âºè‰∏äÁ∑öÔºÅÊñ∞ÁâàÊú¨ÂåÖÂê´ÂÖ®Êñ∞ÁöÑ LaTeX Á∑®ËºØÂô®„ÄÅÊîπÈÄ≤ÁöÑÈ°åÂ∫´Á≥ªÁµ±„ÄÅÂÄã‰∫∫ÂåñÂ≠∏ÁøíË∑ØÂæëÔºå‰ª•ÂèäÊõ¥Áõ¥ËßÄÁöÑÁî®Êà∂‰ªãÈù¢„ÄÇÊÑüË¨ùÊâÄÊúâÁî®Êà∂ÁöÑËÄêÂøÉÁ≠âÂæÖÂíåÂØ∂Ë≤¥Âª∫Ë≠∞„ÄÇ",
      category: "ÂäüËÉΩÊõ¥Êñ∞",
      date: "2024-01-15",
      author: "MathHub ÈñãÁôºÂúòÈöä",
      priority: "high",
      pinned: true,
      tags: ["Êõ¥Êñ∞", "Êñ∞ÂäüËÉΩ", "LaTeX"],
    },
    {
      id: 2,
      title: "üèÜ ÂØíÂÅáÊï∏Â≠∏Á´∂Ë≥ΩÂ†±ÂêçÈñãÂßã",
      content:
        "2024Âπ¥ÂØíÂÅáÊï∏Â≠∏Á´∂Ë≥ΩÁèæÂ∑≤ÈñãÊîæÂ†±ÂêçÔºÅÊØîË≥ΩÂ∞áÊñº1Êúà20Êó•Ëá≥2Êúà10Êó•ËàâË°åÔºåÂàÜÁÇ∫ÂàùÁ¥ö„ÄÅ‰∏≠Á¥ö„ÄÅÈ´òÁ¥ö‰∏âÂÄãÁµÑÂà•„ÄÇÁç≤ÂãùËÄÖÂ∞áÁç≤ÂæóË±êÂéöÁçéÂìÅÂíåË≠âÊõ∏„ÄÇÂ†±ÂêçÊà™Ê≠¢Êó•ÊúüÔºö1Êúà18Êó•„ÄÇ",
      category: "Ê¥ªÂãïÂÖ¨Âëä",
      date: "2024-01-12",
      author: "Ê¥ªÂãïÁµÑÁπîÂßîÂì°ÊúÉ",
      priority: "high",
      pinned: true,
      tags: ["Á´∂Ë≥Ω", "ÂØíÂÅá", "Â†±Âêç"],
    },
    {
      id: 3,
      title: "‚ö†Ô∏è Á≥ªÁµ±Á∂≠Ë≠∑ÈÄöÁü•",
      content:
        "ÁÇ∫‰∫ÜÊèê‰æõÊõ¥Â•ΩÁöÑÊúçÂãôÂìÅË≥™ÔºåÊàëÂÄëÂ∞áÊñº1Êúà16Êó•ÂáåÊô®2:00-6:00ÈÄ≤Ë°åÁ≥ªÁµ±Á∂≠Ë≠∑„ÄÇÁ∂≠Ë≠∑ÊúüÈñìÁ∂≤Á´ôÂ∞áÊö´ÊôÇÁÑ°Ê≥ïË®™ÂïèÔºåË´ãÊèêÂâçÂÆâÊéíÂ≠∏ÁøíÊôÇÈñì„ÄÇÈÄ†Êàê‰∏ç‰æøÔºåÊï¨Ë´ãË´íËß£„ÄÇ",
      category: "Á≥ªÁµ±ÂÖ¨Âëä",
      date: "2024-01-10",
      author: "ÊäÄË°ìÂúòÈöä",
      priority: "medium",
      pinned: false,
      tags: ["Á∂≠Ë≠∑", "Á≥ªÁµ±", "ÈÄöÁü•"],
    },
    {
      id: 4,
      title: "üìö Êñ∞Â¢ûÂæÆÁ©çÂàÜÈÄ≤ÈöéÈ°åÂ∫´",
      content:
        "ÊáâÂª£Â§ßÁî®Êà∂Ë¶ÅÊ±ÇÔºåÊàëÂÄëÊñ∞Â¢û‰∫ÜÂæÆÁ©çÂàÜÈÄ≤ÈöéÈ°åÂ∫´ÔºåÂåÖÂê´Ê•µÈôê„ÄÅÂ∞éÊï∏„ÄÅÁ©çÂàÜÁ≠âÈ´òÈõ£Â∫¶È°åÁõÆ„ÄÇÈÅ©ÂêàÊ∫ñÂÇôÂ§ßÂ≠∏ÂÖ•Â≠∏ËÄÉË©¶ÂíåÊï∏Â≠∏Á´∂Ë≥ΩÁöÑÂêåÂ≠∏Á∑¥Áøí„ÄÇ",
      category: "ÂÖßÂÆπÊõ¥Êñ∞",
      date: "2024-01-08",
      author: "ÂÖßÂÆπÂúòÈöä",
      priority: "low",
      pinned: false,
      tags: ["ÂæÆÁ©çÂàÜ", "È°åÂ∫´", "ÈÄ≤Èöé"],
    },
    {
      id: 5,
      title: "üéØ ÊØèÊó•‰∏ÄÈ°åÊåëÊà∞Ê¥ªÂãïÈñãÂßã",
      content:
        "ÂÖ®Êñ∞ÁöÑÊØèÊó•‰∏ÄÈ°åÊåëÊà∞Ê¥ªÂãïÊ≠£ÂºèÈñãÂßãÔºÅÊØèÂ§©ÂÆåÊàê‰∏ÄÈÅìÁ≤æÈÅ∏È°åÁõÆÔºåÈÄ£Á∫åÂÆåÊàêÂèØÁç≤ÂæóÁ©çÂàÜÁçéÂãµ„ÄÇÈÄ£Á∫å30Â§©ÂÆåÊàêÊåëÊà∞ÁöÑÁî®Êà∂Â∞áÁç≤ÂæóÁâπÊÆäÂæΩÁ´†ÂíåÁ®±Ëôü„ÄÇ",
      category: "Ê¥ªÂãïÂÖ¨Âëä",
      date: "2024-01-05",
      author: "Á§æÁæ§ÁÆ°ÁêÜÂì°",
      priority: "medium",
      pinned: false,
      tags: ["ÊØèÊó•‰∏ÄÈ°å", "ÊåëÊà∞", "Á©çÂàÜ"],
    },
    {
      id: 6,
      title: "üîß ‰øÆÂæ©Â∑≤Áü•ÂïèÈ°å",
      content:
        "ÊàëÂÄëÂ∑≤‰øÆÂæ©‰ª•‰∏ãÂïèÈ°åÔºöLaTeX ÂÖ¨ÂºèÊ∏≤ÊüìÂª∂ÈÅ≤„ÄÅÊêúÂ∞ãÂäüËÉΩÂÅ∂ÁàæÂ§±Êïà„ÄÅÂÄã‰∫∫Ë≥áÊñôÈ†ÅÈù¢ËºâÂÖ•Á∑©ÊÖ¢„ÄÇÂ¶ÇÊûúÊÇ®‰ªçÈÅáÂà∞ÂïèÈ°åÔºåË´ãËÅØÁµ°ÂÆ¢Êúç„ÄÇ",
      category: "ÈåØË™§‰øÆÂæ©",
      date: "2024-01-03",
      author: "ÊäÄË°ìÂúòÈöä",
      priority: "low",
      pinned: false,
      tags: ["‰øÆÂæ©", "LaTeX", "ÊêúÂ∞ã"],
    },
  ]

  const categories = [
    { value: "all", label: "ÂÖ®ÈÉ®", icon: Bell },
    { value: "ÂäüËÉΩÊõ¥Êñ∞", label: "ÂäüËÉΩÊõ¥Êñ∞", icon: Star },
    { value: "Ê¥ªÂãïÂÖ¨Âëä", label: "Ê¥ªÂãïÂÖ¨Âëä", icon: Megaphone },
    { value: "Á≥ªÁµ±ÂÖ¨Âëä", label: "Á≥ªÁµ±ÂÖ¨Âëä", icon: AlertTriangle },
    { value: "ÂÖßÂÆπÊõ¥Êñ∞", label: "ÂÖßÂÆπÊõ¥Êñ∞", icon: Info },
    { value: "ÈåØË™§‰øÆÂæ©", label: "ÈåØË™§‰øÆÂæ©", icon: Info },
  ]

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-500/10 border-red-400/30 text-red-400"
      case "medium":
        return "bg-yellow-500/10 border-yellow-400/30 text-yellow-400"
      case "low":
        return "bg-blue-500/10 border-blue-400/30 text-blue-400"
      default:
        return "bg-gray-500/10 border-gray-400/30 text-gray-400"
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "ÂäüËÉΩÊõ¥Êñ∞":
        return "bg-green-600"
      case "Ê¥ªÂãïÂÖ¨Âëä":
        return "bg-purple-600"
      case "Á≥ªÁµ±ÂÖ¨Âëä":
        return "bg-orange-600"
      case "ÂÖßÂÆπÊõ¥Êñ∞":
        return "bg-blue-600"
      case "ÈåØË™§‰øÆÂæ©":
        return "bg-gray-600"
      default:
        return "bg-slate-600"
    }
  }

  const filteredAnnouncements = announcements.filter((announcement) => {
    const matchesSearch =
      announcement.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      announcement.content.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory = selectedCategory === "all" || announcement.category === selectedCategory
    return matchesSearch && matchesCategory
  })

  const pinnedAnnouncements = filteredAnnouncements.filter((a) => a.pinned)
  const regularAnnouncements = filteredAnnouncements.filter((a) => !a.pinned)

  return (
    <div className="">
      <div className="max-w-6xl mx-auto p-6">
        {/* Search and Filter */}
        <Card className="bg-slate-800/50 border-blue-400/20 mb-6">
          <CardContent className="p-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-400 w-4 h-4" />
                <Input
                  placeholder="ÊêúÂ∞ãÂÖ¨Âëä..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 bg-slate-700/50 border-blue-400/30 text-white placeholder:text-blue-200"
                />
              </div>
              <Tabs value={selectedCategory} onValueChange={setSelectedCategory}>
                <TabsList className="bg-slate-700/50">
                  {categories.map((category) => (
                    <TabsTrigger
                      key={category.value}
                      value={category.value}
                      className="data-[state=active]:bg-blue-600"
                    >
                      <category.icon className="w-4 h-4 mr-1" />
                      {category.label}
                    </TabsTrigger>
                  ))}
                </TabsList>
              </Tabs>
            </div>
          </CardContent>
        </Card>

        {/* Pinned Announcements */}
        {pinnedAnnouncements.length > 0 && (
          <div className="mb-8">
            <h2 className="text-xl   text-white mb-4 flex items-center">
              <Pin className="w-5 h-5 mr-2 text-yellow-400" />
              ÁΩÆÈ†ÇÂÖ¨Âëä
            </h2>
            <div className="space-y-4">
              {pinnedAnnouncements.map((announcement) => (
                <Card key={announcement.id} className="bg-slate-800/50 border-yellow-400/30">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <Pin className="w-4 h-4 text-yellow-400" />
                          <Badge className={getCategoryColor(announcement.category)}>{announcement.category}</Badge>
                          <Badge variant="outline" className={getPriorityColor(announcement.priority)}>
                            {announcement.priority === "high"
                              ? "ÈáçË¶Å"
                              : announcement.priority === "medium"
                                ? "‰∏ÄËà¨"
                                : "ÊôÆÈÄö"}
                          </Badge>
                        </div>
                        <CardTitle className="text-white text-lg mb-2">{announcement.title}</CardTitle>
                        <CardDescription className="text-blue-200 flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          {announcement.date} ‚Ä¢ {announcement.author}
                        </CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-blue-100 mb-4 leading-relaxed">{announcement.content}</p>
                    <div className="flex flex-wrap gap-2">
                      {announcement.tags.map((tag, index) => (
                        <Badge key={`tag-${announcement.id}-${index}`} variant="outline" className="text-blue-300 border-blue-400/30">
                          #{tag}
                        </Badge>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Regular Announcements */}
        <div>
          <h2 className="text-xl   text-white mb-4 flex items-center">
            <Bell className="w-5 h-5 mr-2 text-blue-400" />
            ÊâÄÊúâÂÖ¨Âëä
          </h2>
          <div className="space-y-4">
            {regularAnnouncements.map((announcement) => (
              <Card
                key={announcement.id}
                className="bg-slate-800/50 border-blue-400/20 hover:border-blue-400/40 transition-colors"
              >
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <Badge className={getCategoryColor(announcement.category)}>{announcement.category}</Badge>
                        <Badge variant="outline" className={getPriorityColor(announcement.priority)}>
                          {announcement.priority === "high"
                            ? "ÈáçË¶Å"
                            : announcement.priority === "medium"
                              ? "‰∏ÄËà¨"
                              : "ÊôÆÈÄö"}
                        </Badge>
                      </div>
                      <CardTitle className="text-white text-lg mb-2">{announcement.title}</CardTitle>
                      <CardDescription className="text-blue-200 flex items-center">
                        <Calendar className="w-4 h-4 mr-1" />
                        {announcement.date} ‚Ä¢ {announcement.author}
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-blue-100 mb-4 leading-relaxed">{announcement.content}</p>
                  <div className="flex flex-wrap gap-2">
                    {announcement.tags.map((tag, index) => (
                      <Badge key={`tag-${announcement.id}-${index}`} variant="outline" className="text-blue-300 border-blue-400/30">
                        #{tag}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {filteredAnnouncements.length === 0 && (
          <Card className="bg-slate-800/50 border-blue-400/20">
            <CardContent className="p-12 text-center">
              <Bell className="w-16 h-16 text-blue-400/50 mx-auto mb-4" />
              <h3 className="text-white text-lg font-medium mb-2">Ê≤íÊúâÊâæÂà∞Áõ∏ÈóúÂÖ¨Âëä</h3>
              <p className="text-blue-200">Ë´ãÂòóË©¶Ë™øÊï¥ÊêúÂ∞ãÊ¢ù‰ª∂ÊàñÈÅ∏Êìá‰∏çÂêåÁöÑÂàÜÈ°û</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
